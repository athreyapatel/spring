package com.rakuten.prj.client;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import com.rakuten.prj.entity.Product;

public class StreamEx {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		List<Product> products = new ArrayList<>();
		products.add(new Product(645, "Hp Laptop", 135000.00, "computer"));
		products.add(new Product(224, "iPhone", 98000.00, "mobile"));
		products.add(new Product(834, "Logitech Mouse", 600.00, "computer"));
		products.add(new Product(5, "Sony Bravia", 125000.00, "tv"));
		products.add(new Product(912, "One Plus", 32000.00, "mobile"));
		products.add(new Product(88, "HP Printer", 19000.00, "computer"));
		// Filter is to get the subset from main collection
		List<Product> mobiles = products.stream().filter(p -> p.getCategory().equalsIgnoreCase("mobile"))
				.collect(Collectors.toList());
		mobiles.forEach(p -> System.out.println(p));// how you consume it
		System.out.println("///////////////////////////////");
		// Method Reference
		// Both are same
		mobiles.forEach(System.out::println);

		System.out.println("===============================");

		// Map is to transform the data
		// output no=input no

		products.stream().map(p -> p.getName()).forEach(System.out::println);

		// to get sum of all products

		double sum = products.stream().map(p -> p.getPrice()).reduce(0.0, (v1, v2) -> v1 + v2);
		System.out.println(sum);

		// map, flatmap,filter,skip,limit are int op
		// forEach,collect and reduce are terminal op.
		
		
		Map<String, List<Product>> productCat = products.stream().collect(Collectors.groupingBy(p->p.getCategory()));
		
		
		List<Product> computers=productCat.get("computer");
		for(Product p : computers) {
			System.out.println(p);
		}
		String str = "Java is OOP, Java is open source";
		String[] splited = str.split(" ");
		HashMap<String, Integer> hash = new HashMap<String, Integer>();
		for (int i=0;i<=splited.length-1;i++) {
			int count=1;
			if(hash.containsKey(splited)==true) {
				count++;
			}else {
				hash.put(splited[i], count);
			}
		}
		for (int i = 0; i < splited.length; i++) {
			hash.get(splited[i]);
		}
	}

}
